package ai.bianjie.ddc.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import ai.bianjie.ddc.config.ConfigCache;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class ChargeLogic extends Contract {
    //private static final String BINARY = "60806040523480156200001157600080fd5b5060405162003ee038038062003ee08339818101604052810190620000379190620001c4565b620000576200004b620000e160201b60201c565b620000e960201b60201c565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000253565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001be8162000239565b92915050565b60008060408385031215620001d857600080fd5b6000620001e885828601620001ad565b9250506020620001fb85828601620001ad565b9150509250929050565b6000620002128262000219565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002448162000205565b81146200025057600080fd5b50565b613c7d80620002636000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a6116100975780639d8215a2116100665780639d8215a214610284578063c9c45a0f146102b4578063d213fe45146102e4578063f2fde38b14610314576100f5565b8063715018a6146102105780638a27a80d1461021a5780638da5cb5b1461024a5780639687519014610268576100f5565b806336351c7c116100d357806336351c7c146101505780636356918914610180578063651a50c0146101b057806370a08231146101e0576100f5565b806318160ddd146100fa5780632b2e05c11461011857806330c3923914610134575b600080fd5b610102610330565b60405161010f9190613946565b60405180910390f35b610132600480360381019061012d9190612dee565b6103d7565b005b61014e60048036038101906101499190612dee565b610507565b005b61016a60048036038101906101659190612ea2565b610637565b60405161017791906136a7565b60405180910390f35b61019a60048036038101906101959190612e53565b610793565b6040516101a791906136a7565b60405180910390f35b6101ca60048036038101906101c59190612dee565b610ac5565b6040516101d791906136a7565b60405180910390f35b6101fa60048036038101906101f59190612dee565b610de3565b6040516102079190613946565b60405180910390f35b610218610e97565b005b610234600480360381019061022f9190612ea2565b610f1f565b60405161024191906136a7565b60405180910390f35b6102526112ee565b60405161025f91906135cc565b60405180910390f35b610282600480360381019061027d9190612e17565b611317565b005b61029e60048036038101906102999190612e17565b6113f0565b6040516102ab91906136a7565b60405180910390f35b6102ce60048036038101906102c99190612e17565b61171d565b6040516102db9190613961565b60405180910390f35b6102fe60048036038101906102f99190613005565b6117d4565b60405161030b91906136a7565b60405180910390f35b61032e60048036038101906103299190612dee565b611b6d565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561039a57600080fd5b505afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d2919061302e565b905090565b6103df611c65565b73ffffffffffffffffffffffffffffffffffffffff166103fd6112ee565b73ffffffffffffffffffffffffffffffffffffffff1614610453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044a90613826565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614156104c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ba90613866565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61050f611c65565b73ffffffffffffffffffffffffffffffffffffffff1661052d6112ee565b73ffffffffffffffffffffffffffffffffffffffff1614610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a90613826565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614156105f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ea90613786565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008082141561067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067390613726565b60405180910390fd5b61068d610687611c65565b84611c6d565b6106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c390613766565b60405180910390fd5b6106de6106d7611c65565b8484611d5f565b61071d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071490613926565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1661073c611c65565b73ffffffffffffffffffffffffffffffffffffffff167f4ade20d82044693c0d3331ba1d2a482d103734f274166989491c8d30d3f2ecb1846040516107819190613946565b60405180910390a36001905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395c2a8d96107db611c65565b6040518263ffffffff1660e01b81526004016107f791906135cc565b60206040518083038186803b15801561080f57600080fd5b505afa158015610823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108479190612ede565b610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087d90613846565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663333f4ad66108cc611c65565b60006040518363ffffffff1660e01b81526004016108eb92919061367e565b60206040518083038186803b15801561090357600080fd5b505afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190612ede565b61097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190613746565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663322013238585856040518463ffffffff1660e01b81526004016109d993929190613647565b602060405180830381600087803b1580156109f357600080fd5b505af1158015610a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2b9190612ede565b610a6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a61906137c6565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff167f929dc21675623ba3d42ef9e085962b7d88bf57ba159fe8f0a86d6785195e2acc8484604051610ab29291906136dd565b60405180910390a2600190509392505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395c2a8d9610b0d611c65565b6040518263ffffffff1660e01b8152600401610b2991906135cc565b60206040518083038186803b158015610b4157600080fd5b505afa158015610b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b799190612ede565b610bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610baf90613846565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663333f4ad6610bfe611c65565b60006040518363ffffffff1660e01b8152600401610c1d92919061367e565b60206040518083038186803b158015610c3557600080fd5b505afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d9190612ede565b610cac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca390613746565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16620b8f70836040518263ffffffff1660e01b8152600401610d0691906135cc565b602060405180830381600087803b158015610d2057600080fd5b505af1158015610d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d589190612ede565b610d97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8e90613806565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fe1aaf522946f19bd4a0b6e67a2da36e45fcddca4a1a253a919ff7029a638ab1660405160405180910390a260019050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354d85c4e836040518263ffffffff1660e01b8152600401610e4091906135cc565b60206040518083038186803b158015610e5857600080fd5b505afa158015610e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e90919061302e565b9050919050565b610e9f611c65565b73ffffffffffffffffffffffffffffffffffffffff16610ebd6112ee565b73ffffffffffffffffffffffffffffffffffffffff1614610f13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0a90613826565b60405180910390fd5b610f1d6000611f08565b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395c2a8d9610f67611c65565b6040518263ffffffff1660e01b8152600401610f8391906135cc565b60206040518083038186803b158015610f9b57600080fd5b505afa158015610faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd39190612ede565b611012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100990613846565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663333f4ad6611058611c65565b60006040518363ffffffff1660e01b815260040161107792919061367e565b60206040518083038186803b15801561108f57600080fd5b505afa1580156110a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c79190612ede565b611106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fd90613746565b60405180910390fd5b6111258373ffffffffffffffffffffffffffffffffffffffff16611fcc565b80156111d85750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b7fa29f9846040518263ffffffff1660e01b815260040161118791906135cc565b60206040518083038186803b15801561119f57600080fd5b505afa1580156111b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d79190612ede565b5b611217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120e906137e6565b60405180910390fd5b600082141561125b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611252906138c6565b60405180910390fd5b600061126f84611269611c65565b85611d5f565b905080156112e4578373ffffffffffffffffffffffffffffffffffffffff16611296611c65565b73ffffffffffffffffffffffffffffffffffffffff167fca2ce982d63c71a419517d389df253be4b0d6f4da85fe1491e49608b139ee0be856040516112db9190613946565b60405180910390a35b8091505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061132a611324611c65565b83611fdf565b905061133e611337611c65565b8483612180565b61137d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611374906138e6565b60405180910390fd5b611385611c65565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fe5e4f0955699fa27be3f7aeb5a9e4ab78b6a37914fd44e5b08c4b78e56f04aa084846040516113e39291906136dd565b60405180910390a3505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395c2a8d9611438611c65565b6040518263ffffffff1660e01b815260040161145491906135cc565b60206040518083038186803b15801561146c57600080fd5b505afa158015611480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a49190612ede565b6114e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114da90613846565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663333f4ad6611529611c65565b60006040518363ffffffff1660e01b815260040161154892919061367e565b60206040518083038186803b15801561156057600080fd5b505afa158015611574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115989190612ede565b6115d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ce90613746565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663093f28e084846040518363ffffffff1660e01b815260040161163492919061361e565b602060405180830381600087803b15801561164e57600080fd5b505af1158015611662573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116869190612ede565b6116c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bc90613806565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f5903bc6f8f7bf2a96aab9641af90df87a19c37df7652f4031cc632d6a7500f4f8360405161170b91906136c2565b60405180910390a26001905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c9c45a0f84846040518363ffffffff1660e01b815260040161177c92919061361e565b60206040518083038186803b15801561179457600080fd5b505afa1580156117a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cc9190613057565b905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395c2a8d961181c611c65565b6040518263ffffffff1660e01b815260040161183891906135cc565b60206040518083038186803b15801561185057600080fd5b505afa158015611864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118889190612ede565b6118c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118be90613846565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663333f4ad661190d611c65565b60006040518363ffffffff1660e01b815260040161192c92919061367e565b60206040518083038186803b15801561194457600080fd5b505afa158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197c9190612ede565b6119bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b290613746565b60405180910390fd5b60008214156119ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f6906138c6565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe1e03356000611a47611c65565b856040518463ffffffff1660e01b8152600401611a66939291906135e7565b602060405180830381600087803b158015611a8057600080fd5b505af1158015611a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab89190612ede565b611af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aee90613906565b60405180910390fd5b611aff611c65565b73ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f4ade20d82044693c0d3331ba1d2a482d103734f274166989491c8d30d3f2ecb184604051611b5c9190613946565b60405180910390a360019050919050565b611b75611c65565b73ffffffffffffffffffffffffffffffffffffffff16611b936112ee565b73ffffffffffffffffffffffffffffffffffffffff1614611be9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be090613826565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5090613706565b60405180910390fd5b611c6281611f08565b50565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611cde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd5906138a6565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4490613726565b60405180910390fd5b611d5783836121b4565b905092915050565b600081600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354d85c4e866040518263ffffffff1660e01b8152600401611dbd91906135cc565b60206040518083038186803b158015611dd557600080fd5b505afa158015611de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0d919061302e565b1015611e4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e45906137a6565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe1e03358585856040518463ffffffff1660e01b8152600401611ead939291906135e7565b602060405180830381600087803b158015611ec757600080fd5b505af1158015611edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eff9190612ede565b90509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080823b905060008111915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b7fa29f9846040518263ffffffff1660e01b815260040161203c91906135cc565b60206040518083038186803b15801561205457600080fd5b505afa158015612068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208c9190612ede565b6120cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c2906137e6565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c9c45a0f84846040518363ffffffff1660e01b815260040161212892919061361e565b60206040518083038186803b15801561214057600080fd5b505afa158015612154573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121789190613057565b905092915050565b6000808263ffffffff1611156121a8576121a183858463ffffffff16611d5f565b90506121ad565b600190505b9392505050565b60006121be612be4565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fbcbc0f1856040518263ffffffff1660e01b815260040161221991906135cc565b60006040518083038186803b15801561223157600080fd5b505afa158015612245573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061226e9190612f07565b90919293945050856000018660400187606001886080018960a0018560018111156122c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60018111156122fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815250856001811115612336577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600181111561236e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152508590528560028111156123ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028111156123e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152508590525050505050600180811115612429577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81608001516001811115612466577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1480156124e657506001808111156124a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160a0015160018111156124e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b145b612525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251c90613846565b60405180910390fd5b61252d612be4565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fbcbc0f1856040518263ffffffff1660e01b815260040161258891906135cc565b60006040518083038186803b1580156125a057600080fd5b505afa1580156125b4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906125dd9190612f07565b90919293945050856000018660400187606001886080018960a001856001811115612631577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001811115612669577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152508560018111156126a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60018111156126dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81525085905285600281111561271c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811115612754577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152508590525050505050600180811115612798577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816080015160018111156127d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1480156128555750600180811115612816577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160a001516001811115612853577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b145b612894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288b90613886565b60405180910390fd5b6002808111156128cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260400151600281111561290a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561294b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294290613766565b60405180910390fd5b60006002811115612985577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826040015160028111156129c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14806129e557506129e481606001518360000151612ab490919063ffffffff16565b5b80612aaa5750612a0681606001518360600151612ab490919063ffffffff16565b8015612a295750612a2881600001518360000151612ab490919063ffffffff16565b5b8015612aa95750600280811115612a69577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81604001516002811115612aa6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14155b5b9250505092915050565b60008083905060008390508051825114612ad357600092505050612bde565b60008251905060005b81811015612bd557828181518110612b1d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110612b83577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612bc2576000945050505050612bde565b8080612bcd90613aca565b915050612adc565b50600193505050505b92915050565b6040518060e00160405280606081526020016060815260200160006002811115612c37577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016060815260200160006001811115612c7d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815260200160006001811115612cbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001606081525090565b6000612cdc612cd7846139ad565b61397c565b905082815260208101848484011115612cf457600080fd5b612cff848285613a97565b509392505050565b600081359050612d1681613bb4565b92915050565b600081519050612d2b81613bcb565b92915050565b600081359050612d4081613be2565b92915050565b600081519050612d5581613bf9565b92915050565b600081519050612d6a81613c09565b92915050565b600082601f830112612d8157600080fd5b8151612d91848260208601612cc9565b91505092915050565b600081359050612da981613c19565b92915050565b600081519050612dbe81613c19565b92915050565b600081359050612dd381613c30565b92915050565b600081519050612de881613c30565b92915050565b600060208284031215612e0057600080fd5b6000612e0e84828501612d07565b91505092915050565b60008060408385031215612e2a57600080fd5b6000612e3885828601612d07565b9250506020612e4985828601612d31565b9150509250929050565b600080600060608486031215612e6857600080fd5b6000612e7686828701612d07565b9350506020612e8786828701612d31565b9250506040612e9886828701612dc4565b9150509250925092565b60008060408385031215612eb557600080fd5b6000612ec385828601612d07565b9250506020612ed485828601612d9a565b9150509250929050565b600060208284031215612ef057600080fd5b6000612efe84828501612d1c565b91505092915050565b600080600080600080600060e0888a031215612f2257600080fd5b600088015167ffffffffffffffff811115612f3c57600080fd5b612f488a828b01612d70565b975050602088015167ffffffffffffffff811115612f6557600080fd5b612f718a828b01612d70565b9650506040612f828a828b01612d46565b955050606088015167ffffffffffffffff811115612f9f57600080fd5b612fab8a828b01612d70565b9450506080612fbc8a828b01612d5b565b93505060a0612fcd8a828b01612d5b565b92505060c088015167ffffffffffffffff811115612fea57600080fd5b612ff68a828b01612d70565b91505092959891949750929550565b60006020828403121561301757600080fd5b600061302584828501612d9a565b91505092915050565b60006020828403121561304057600080fd5b600061304e84828501612daf565b91505092915050565b60006020828403121561306957600080fd5b600061307784828501612dd9565b91505092915050565b613089816139ee565b82525050565b61309881613a00565b82525050565b6130a781613a0c565b82525050565b6130b681613a85565b82525050565b60006130c96026836139dd565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061312f6020836139dd565b91507f6368617267653a206e6f207265636861726765206973206e65636573736172796000830152602082019050919050565b600061316f6015836139dd565b91507f6368617267653a206e6f207065726d697373696f6e00000000000000000000006000830152602082019050919050565b60006131af601e836139dd565b91507f6368617267653a206e6f207265636861726765207065726d697373696f6e00006000830152602082019050919050565b60006131ef601d836139dd565b91507f6368617267653a206461746120746865207a65726f20616464726573730000006000830152602082019050919050565b600061322f6025836139dd565b91507f6368617267653a206163636f756e742062616c616e6365206973206e6f74206560008301527f6e6f7567680000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006132956016836139dd565b91507f6368617267653a2061646420666565206661696c6564000000000000000000006000830152602082019050919050565b60006132d56018836139dd565b91507f6368617267653a206e6f742044444320636f6e747261637400000000000000006000830152602082019050919050565b60006133156019836139dd565b91507f6368617267653a2064656c65746520666565206661696c6564000000000000006000830152602082019050919050565b60006133556020836139dd565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006133956019836139dd565b91507f6368617267653a206163636f756e742069732066726f7a656e000000000000006000830152602082019050919050565b60006133d5601d836139dd565b91507f6368617267653a206175746820746865207a65726f20616464726573730000006000830152602082019050919050565b60006134156014836139dd565b91507f6368617267653a20746f2069732066726f7a656e0000000000000000000000006000830152602082019050919050565b60006134556024836139dd565b91507f6368617267653a20726563686172676520746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006134bb6020836139dd565b91507f6368617267653a206e6f207472616e73666572206973206e65636573736172796000830152602082019050919050565b60006134fb6012836139dd565b91507f6368617267653a20706179206661696c656400000000000000000000000000006000830152602082019050919050565b600061353b601b836139dd565b91507f6368617267653a2073656c665265636861726765206661696c656400000000006000830152602082019050919050565b600061357b6017836139dd565b91507f6368617267653a207265636861726765206661696c65640000000000000000006000830152602082019050919050565b6135b781613a6b565b82525050565b6135c681613a75565b82525050565b60006020820190506135e16000830184613080565b92915050565b60006060820190506135fc6000830186613080565b6136096020830185613080565b61361660408301846135ae565b949350505050565b60006040820190506136336000830185613080565b613640602083018461309e565b9392505050565b600060608201905061365c6000830186613080565b613669602083018561309e565b61367660408301846135bd565b949350505050565b60006040820190506136936000830185613080565b6136a060208301846130ad565b9392505050565b60006020820190506136bc600083018461308f565b92915050565b60006020820190506136d7600083018461309e565b92915050565b60006040820190506136f2600083018561309e565b6136ff60208301846135bd565b9392505050565b6000602082019050818103600083015261371f816130bc565b9050919050565b6000602082019050818103600083015261373f81613122565b9050919050565b6000602082019050818103600083015261375f81613162565b9050919050565b6000602082019050818103600083015261377f816131a2565b9050919050565b6000602082019050818103600083015261379f816131e2565b9050919050565b600060208201905081810360008301526137bf81613222565b9050919050565b600060208201905081810360008301526137df81613288565b9050919050565b600060208201905081810360008301526137ff816132c8565b9050919050565b6000602082019050818103600083015261381f81613308565b9050919050565b6000602082019050818103600083015261383f81613348565b9050919050565b6000602082019050818103600083015261385f81613388565b9050919050565b6000602082019050818103600083015261387f816133c8565b9050919050565b6000602082019050818103600083015261389f81613408565b9050919050565b600060208201905081810360008301526138bf81613448565b9050919050565b600060208201905081810360008301526138df816134ae565b9050919050565b600060208201905081810360008301526138ff816134ee565b9050919050565b6000602082019050818103600083015261391f8161352e565b9050919050565b6000602082019050818103600083015261393f8161356e565b9050919050565b600060208201905061395b60008301846135ae565b92915050565b600060208201905061397660008301846135bd565b92915050565b6000604051905081810181811067ffffffffffffffff821117156139a3576139a2613b71565b5b8060405250919050565b600067ffffffffffffffff8211156139c8576139c7613b71565b5b601f19601f8301169050602081019050919050565b600082825260208201905092915050565b60006139f982613a4b565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050613a4682613ba0565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000613a9082613a38565b9050919050565b60005b83811015613ab5578082015181840152602081019050613a9a565b83811115613ac4576000848401525b50505050565b6000613ad582613a6b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b0857613b07613b13565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60038110613bb157613bb0613b42565b5b50565b613bbd816139ee565b8114613bc857600080fd5b50565b613bd481613a00565b8114613bdf57600080fd5b50565b613beb81613a0c565b8114613bf657600080fd5b50565b60038110613c0657600080fd5b50565b60028110613c1657600080fd5b50565b613c2281613a6b565b8114613c2d57600080fd5b50565b613c3981613a75565b8114613c4457600080fd5b5056fea26469706673582212200f70a3f55e57373078dece196025623d02ed55de23eec8d9049a7343051240c564736f6c63430008000033";
    private static final String BINARY = ConfigCache.get().getChargeLogicBIN();

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_DELETEDDC = "deleteDDC";

    public static final String FUNC_DELETEFEE = "deleteFee";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAY = "pay";

    public static final String FUNC_QUERYFEE = "queryFee";

    public static final String FUNC_RECHARGE = "recharge";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SELFRECHARGE = "selfRecharge";

    public static final String FUNC_SETAUTH = "setAuth";

    public static final String FUNC_SETFEE = "setFee";

    public static final String FUNC_SETICHARGEDATA = "setiChargeData";

    public static final String FUNC_SETTLEMENT = "settlement";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event DELETEDDC_EVENT = new Event("DeleteDDC", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event DELETEFEE_EVENT = new Event("DeleteFee", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes4>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAY_EVENT = new Event("Pay", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bytes4>() {}, new TypeReference<Uint32>() {}));
    ;

    public static final Event RECHARGE_EVENT = new Event("Recharge", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETFEE_EVENT = new Event("SetFee", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes4>() {}, new TypeReference<Uint32>() {}));
    ;

    public static final Event SETTLEMENT_EVENT = new Event("Settlement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected ChargeLogic(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ChargeLogic(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ChargeLogic(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ChargeLogic(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ChargeLogic> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String chargeData, String authLogic) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(chargeData),
                new Address(authLogic)));
        return deployRemoteCall(ChargeLogic.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<ChargeLogic> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String chargeData, String authLogic) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(chargeData),
                new Address(authLogic)));
        return deployRemoteCall(ChargeLogic.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ChargeLogic> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String chargeData, String authLogic) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(chargeData),
                new Address(authLogic)));
        return deployRemoteCall(ChargeLogic.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ChargeLogic> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String chargeData, String authLogic) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(chargeData),
                new Address(authLogic)));
        return deployRemoteCall(ChargeLogic.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<DeleteDDCEventResponse> getDeleteDDCEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEDDC_EVENT, transactionReceipt);
        ArrayList<DeleteDDCEventResponse> responses = new ArrayList<DeleteDDCEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteDDCEventResponse typedResponse = new DeleteDDCEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ddcAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DeleteDDCEventResponse> deleteDDCEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, DeleteDDCEventResponse>() {
            @Override
            public DeleteDDCEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEDDC_EVENT, log);
                DeleteDDCEventResponse typedResponse = new DeleteDDCEventResponse();
                typedResponse.log = log;
                typedResponse.ddcAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<DeleteDDCEventResponse> deleteDDCEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEDDC_EVENT));
        return deleteDDCEventObservable(filter);
    }

    public List<DeleteFeeEventResponse> getDeleteFeeEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEFEE_EVENT, transactionReceipt);
        ArrayList<DeleteFeeEventResponse> responses = new ArrayList<DeleteFeeEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteFeeEventResponse typedResponse = new DeleteFeeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ddcAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DeleteFeeEventResponse> deleteFeeEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, DeleteFeeEventResponse>() {
            @Override
            public DeleteFeeEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEFEE_EVENT, log);
                DeleteFeeEventResponse typedResponse = new DeleteFeeEventResponse();
                typedResponse.log = log;
                typedResponse.ddcAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<DeleteFeeEventResponse> deleteFeeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEFEE_EVENT));
        return deleteFeeEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public List<PayEventResponse> getPayEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PAY_EVENT, transactionReceipt);
        ArrayList<PayEventResponse> responses = new ArrayList<PayEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PayEventResponse typedResponse = new PayEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcAddr = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PayEventResponse> payEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, PayEventResponse>() {
            @Override
            public PayEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PAY_EVENT, log);
                PayEventResponse typedResponse = new PayEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcAddr = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<PayEventResponse> payEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAY_EVENT));
        return payEventObservable(filter);
    }

    public List<RechargeEventResponse> getRechargeEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RECHARGE_EVENT, transactionReceipt);
        ArrayList<RechargeEventResponse> responses = new ArrayList<RechargeEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RechargeEventResponse typedResponse = new RechargeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RechargeEventResponse> rechargeEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, RechargeEventResponse>() {
            @Override
            public RechargeEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RECHARGE_EVENT, log);
                RechargeEventResponse typedResponse = new RechargeEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<RechargeEventResponse> rechargeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECHARGE_EVENT));
        return rechargeEventObservable(filter);
    }

    public List<SetFeeEventResponse> getSetFeeEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETFEE_EVENT, transactionReceipt);
        ArrayList<SetFeeEventResponse> responses = new ArrayList<SetFeeEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetFeeEventResponse typedResponse = new SetFeeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ddcAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SetFeeEventResponse> setFeeEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SetFeeEventResponse>() {
            @Override
            public SetFeeEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETFEE_EVENT, log);
                SetFeeEventResponse typedResponse = new SetFeeEventResponse();
                typedResponse.log = log;
                typedResponse.ddcAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SetFeeEventResponse> setFeeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETFEE_EVENT));
        return setFeeEventObservable(filter);
    }

    public List<SettlementEventResponse> getSettlementEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETTLEMENT_EVENT, transactionReceipt);
        ArrayList<SettlementEventResponse> responses = new ArrayList<SettlementEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SettlementEventResponse typedResponse = new SettlementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.accAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcAddr = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SettlementEventResponse> settlementEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SettlementEventResponse>() {
            @Override
            public SettlementEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETTLEMENT_EVENT, log);
                SettlementEventResponse typedResponse = new SettlementEventResponse();
                typedResponse.log = log;
                typedResponse.accAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcAddr = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SettlementEventResponse> settlementEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENT_EVENT));
        return settlementEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> balanceOf(String accAddr) {
        final Function function = new Function(
                FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(accAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteDDC(String ddcAddr) {
        final Function function = new Function(
                FUNC_DELETEDDC, 
                Arrays.<Type>asList(new Address(ddcAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteFee(String ddcAddr, byte[] sig) {
        final Function function = new Function(
                FUNC_DELETEFEE, 
                Arrays.<Type>asList(new Address(ddcAddr),
                new Bytes4(sig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> owner() {
        final Function function = new Function(
                FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> pay(String from, byte[] sig) {
        final Function function = new Function(
                FUNC_PAY, 
                Arrays.<Type>asList(new Address(from),
                new Bytes4(sig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queryFee(String ddcAddr, byte[] sig) {
        final Function function = new Function(
                FUNC_QUERYFEE, 
                Arrays.<Type>asList(new Address(ddcAddr),
                new Bytes4(sig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> recharge(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_RECHARGE, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> selfRecharge(BigInteger value) {
        final Function function = new Function(
                FUNC_SELFRECHARGE, 
                Arrays.<Type>asList(new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setAuth(String authLogic) {
        final Function function = new Function(
                FUNC_SETAUTH, 
                Arrays.<Type>asList(new Address(authLogic)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setFee(String ddcAddr, byte[] sig, BigInteger amount) {
        final Function function = new Function(
                FUNC_SETFEE, 
                Arrays.<Type>asList(new Address(ddcAddr),
                new Bytes4(sig),
                new Uint32(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setiChargeData(String chargeData) {
        final Function function = new Function(
                FUNC_SETICHARGEDATA, 
                Arrays.<Type>asList(new Address(chargeData)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> settlement(String ddcAddr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETTLEMENT, 
                Arrays.<Type>asList(new Address(ddcAddr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> totalSupply() {
        final Function function = new Function(
                FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static ChargeLogic load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ChargeLogic(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ChargeLogic load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ChargeLogic(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ChargeLogic load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ChargeLogic(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ChargeLogic load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ChargeLogic(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class DeleteDDCEventResponse {
        public Log log;

        public String ddcAddr;
    }

    public static class DeleteFeeEventResponse {
        public Log log;

        public String ddcAddr;

        public byte[] sig;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class PayEventResponse {
        public Log log;

        public String from;

        public String ddcAddr;

        public byte[] sig;

        public BigInteger amount;
    }

    public static class RechargeEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger value;
    }

    public static class SetFeeEventResponse {
        public Log log;

        public String ddcAddr;

        public byte[] sig;

        public BigInteger amount;
    }

    public static class SettlementEventResponse {
        public Log log;

        public String accAddr;

        public String ddcAddr;

        public BigInteger value;
    }
}

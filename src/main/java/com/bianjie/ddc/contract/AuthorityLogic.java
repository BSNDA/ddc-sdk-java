package com.bianjie.ddc.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class Authority extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_ACCOUNTAVAILABLE = "accountAvailable";

    public static final String FUNC_ADDACCOUNT = "addAccount";

    public static final String FUNC_ADDCONSUMERBYOPERATOR = "addConsumerByOperator";

    public static final String FUNC_ADDFUNCTION = "addFunction";

    public static final String FUNC_ADDOPERATOR = "addOperator";

    public static final String FUNC_ASSERTACCOUNTROLE = "assertAccountRole";

    public static final String FUNC_DELFUNCTION = "delFunction";

    public static final String FUNC_GETACCOUNT = "getAccount";

    public static final String FUNC_GETAUTHORITYDATACONTRACTADDR = "getAuthorityDataContractAddr";

    public static final String FUNC_GETFUNCTION = "getFunction";

    public static final String FUNC_HASFUNCTIONPERMISSION = "hasFunctionPermission";

    public static final String FUNC_LEADERCHECK = "leaderCheck";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SAMEDIDCHECK = "sameDIDCheck";

    public static final String FUNC_SAMELEADERCHECK = "sameLeaderCheck";

    public static final String FUNC_SAMEPLATFORMMANAGERCHECK = "samePlatformManagerCheck";

    public static final String FUNC_SETAUTHORITYDATACONTRACTADDR = "setAuthorityDataContractAddr";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEACCOUNTSTATE = "updateAccountState";

    public static final Event ADDACCOUNT_EVENT = new Event("AddAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event DELACCOUNT_EVENT = new Event("DelAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event UPDATEACCOUNT_EVENT = new Event("UpdateAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATEACCOUNTSTATE_EVENT = new Event("UpdateAccountState", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
    ;

    @Deprecated
    protected Authority(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Authority(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Authority(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Authority(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Authority> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String authorityData) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(authorityData)));
        return deployRemoteCall(Authority.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Authority> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String authorityData) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(authorityData)));
        return deployRemoteCall(Authority.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Authority> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String authorityData) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(authorityData)));
        return deployRemoteCall(Authority.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Authority> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String authorityData) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(authorityData)));
        return deployRemoteCall(Authority.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<AddAccountEventResponse> getAddAccountEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDACCOUNT_EVENT, transactionReceipt);
        ArrayList<AddAccountEventResponse> responses = new ArrayList<AddAccountEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddAccountEventResponse typedResponse = new AddAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.accountDID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.accountName = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.accountRole = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.leaderDID = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.field = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddAccountEventResponse> addAccountEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddAccountEventResponse>() {
            @Override
            public AddAccountEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADDACCOUNT_EVENT, log);
                AddAccountEventResponse typedResponse = new AddAccountEventResponse();
                typedResponse.log = log;
                typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.accountDID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.accountName = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.accountRole = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.leaderDID = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.field = (String) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AddAccountEventResponse> addAccountEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDACCOUNT_EVENT));
        return addAccountEventObservable(filter);
    }

    public List<DelAccountEventResponse> getDelAccountEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELACCOUNT_EVENT, transactionReceipt);
        ArrayList<DelAccountEventResponse> responses = new ArrayList<DelAccountEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DelAccountEventResponse typedResponse = new DelAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DelAccountEventResponse> delAccountEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, DelAccountEventResponse>() {
            @Override
            public DelAccountEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DELACCOUNT_EVENT, log);
                DelAccountEventResponse typedResponse = new DelAccountEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<DelAccountEventResponse> delAccountEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELACCOUNT_EVENT));
        return delAccountEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public List<UpdateAccountEventResponse> getUpdateAccountEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEACCOUNT_EVENT, transactionReceipt);
        ArrayList<UpdateAccountEventResponse> responses = new ArrayList<UpdateAccountEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateAccountEventResponse typedResponse = new UpdateAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.accountDID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.accountName = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.accountRole = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.leaderDID = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.field = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateAccountEventResponse> updateAccountEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateAccountEventResponse>() {
            @Override
            public UpdateAccountEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEACCOUNT_EVENT, log);
                UpdateAccountEventResponse typedResponse = new UpdateAccountEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.accountDID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.accountName = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.accountRole = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.leaderDID = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.field = (String) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<UpdateAccountEventResponse> updateAccountEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEACCOUNT_EVENT));
        return updateAccountEventObservable(filter);
    }

    public List<UpdateAccountStateEventResponse> getUpdateAccountStateEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEACCOUNTSTATE_EVENT, transactionReceipt);
        ArrayList<UpdateAccountStateEventResponse> responses = new ArrayList<UpdateAccountStateEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateAccountStateEventResponse typedResponse = new UpdateAccountStateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateAccountStateEventResponse> updateAccountStateEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateAccountStateEventResponse>() {
            @Override
            public UpdateAccountStateEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEACCOUNTSTATE_EVENT, log);
                UpdateAccountStateEventResponse typedResponse = new UpdateAccountStateEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<UpdateAccountStateEventResponse> updateAccountStateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEACCOUNTSTATE_EVENT));
        return updateAccountStateEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> accountAvailable(String account) {
        final Function function = new Function(
                FUNC_ACCOUNTAVAILABLE, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addAccount(String account, String accountName, String accountDID) {
        final Function function = new Function(
                FUNC_ADDACCOUNT, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(accountName),
                new Utf8String(accountDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addConsumerByOperator(String account, String accountName, String accountDID, String leaderDID) {
        final Function function = new Function(
                FUNC_ADDCONSUMERBYOPERATOR, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(accountName),
                new Utf8String(accountDID),
                new Utf8String(leaderDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addFunction(BigInteger role, String contractAddress, byte[] sig) {
        final Function function = new Function(
                FUNC_ADDFUNCTION, 
                Arrays.<Type>asList(new Uint8(role),
                new Address(contractAddress),
                new org.web3j.abi.datatypes.generated.Bytes4(sig)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addOperator(String operator, String accountName, String accountDID) {
        final Function function = new Function(
                FUNC_ADDOPERATOR, 
                Arrays.<Type>asList(new Address(operator),
                new Utf8String(accountName),
                new Utf8String(accountDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> assertAccountRole(String account, BigInteger role) {
        final Function function = new Function(
                FUNC_ASSERTACCOUNTROLE, 
                Arrays.<Type>asList(new Address(account),
                new Uint8(role)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> delFunction(BigInteger role, String contractAddress, byte[] sig) {
        final Function function = new Function(
                FUNC_DELFUNCTION, 
                Arrays.<Type>asList(new Uint8(role),
                new Address(contractAddress),
                new org.web3j.abi.datatypes.generated.Bytes4(sig)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getAccount(String account) {
        final Function function = new Function(
                FUNC_GETACCOUNT, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getAuthorityDataContractAddr() {
        final Function function = new Function(
                FUNC_GETAUTHORITYDATACONTRACTADDR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getFunction(BigInteger role, String contractAddress) {
        final Function function = new Function(
                FUNC_GETFUNCTION, 
                Arrays.<Type>asList(new Uint8(role),
                new Address(contractAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> hasFunctionPermission(String account, String contractAddress, byte[] sig) {
        final Function function = new Function(
                FUNC_HASFUNCTIONPERMISSION, 
                Arrays.<Type>asList(new Address(account),
                new Address(contractAddress),
                new org.web3j.abi.datatypes.generated.Bytes4(sig)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> leaderCheck(String account, String leaderAccount) {
        final Function function = new Function(
                FUNC_LEADERCHECK, 
                Arrays.<Type>asList(new Address(account),
                new Address(leaderAccount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> owner() {
        final Function function = new Function(
                FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sameDIDCheck(String account1, String account2) {
        final Function function = new Function(
                FUNC_SAMEDIDCHECK, 
                Arrays.<Type>asList(new Address(account1),
                new Address(account2)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sameLeaderCheck(String account1, String account2) {
        final Function function = new Function(
                FUNC_SAMELEADERCHECK, 
                Arrays.<Type>asList(new Address(account1),
                new Address(account2)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> samePlatformManagerCheck(String account1, String account2) {
        final Function function = new Function(
                FUNC_SAMEPLATFORMMANAGERCHECK, 
                Arrays.<Type>asList(new Address(account1),
                new Address(account2)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setAuthorityDataContractAddr(String authorityDataContractAddr) {
        final Function function = new Function(
                FUNC_SETAUTHORITYDATACONTRACTADDR, 
                Arrays.<Type>asList(new Address(authorityDataContractAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateAccountState(String account, BigInteger state, Boolean changePlatformState) {
        final Function function = new Function(
                FUNC_UPDATEACCOUNTSTATE, 
                Arrays.<Type>asList(new Address(account),
                new Uint8(state),
                new org.web3j.abi.datatypes.Bool(changePlatformState)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Authority load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Authority(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Authority load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Authority(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Authority load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Authority(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Authority load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Authority(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class AddAccountEventResponse {
        public Log log;

        public String caller;

        public String account;

        public String accountDID;

        public String accountName;

        public BigInteger accountRole;

        public String leaderDID;

        public BigInteger platformState;

        public BigInteger operatorState;

        public String field;
    }

    public static class DelAccountEventResponse {
        public Log log;

        public String account;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class UpdateAccountEventResponse {
        public Log log;

        public String account;

        public String accountDID;

        public String accountName;

        public BigInteger accountRole;

        public String leaderDID;

        public BigInteger platformState;

        public BigInteger operatorState;

        public String field;
    }

    public static class UpdateAccountStateEventResponse {
        public Log log;

        public String account;

        public BigInteger platformState;

        public BigInteger operatorState;
    }
}
